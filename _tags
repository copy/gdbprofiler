# OASIS_START
# DO NOT EDIT (digest: 8cef90448d953b474b05bc14b9b4dca3)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library gdb
"src/gdb.cmxs": use_gdb
<src/*.ml{,i,y}>: package(extlib)
<src/*.ml{,i,y}>: package(lwt.ppx)
<src/*.ml{,i,y}>: package(lwt.unix)
<src/*.ml{,i,y}>: package(ppx_deriving)
<src/*.ml{,i,y}>: package(ppx_deriving.show)
# Library rmp_lib
"rmp/rmp_lib.cmxs": use_rmp_lib
<rmp/*.ml{,i,y}>: package(containers)
<rmp/*.ml{,i,y}>: package(containers.data)
<rmp/*.ml{,i,y}>: package(extlib)
<rmp/*.ml{,i,y}>: package(lwt.ppx)
<rmp/*.ml{,i,y}>: package(lwt.unix)
<rmp/*.ml{,i,y}>: package(ppx_deriving)
<rmp/*.ml{,i,y}>: package(ppx_deriving.show)
<rmp/*.ml{,i,y}>: package(ppx_deriving_yojson)
<rmp/*.ml{,i,y}>: use_gdb
# Executable gdbprofiler
<cli/rmp.{native,byte}>: package(containers)
<cli/rmp.{native,byte}>: package(containers.data)
<cli/rmp.{native,byte}>: package(extlib)
<cli/rmp.{native,byte}>: package(lwt.ppx)
<cli/rmp.{native,byte}>: package(lwt.unix)
<cli/rmp.{native,byte}>: package(ppx_deriving)
<cli/rmp.{native,byte}>: package(ppx_deriving.show)
<cli/rmp.{native,byte}>: package(ppx_deriving_yojson)
<cli/rmp.{native,byte}>: use_gdb
<cli/rmp.{native,byte}>: use_rmp_lib
<cli/*.ml{,i,y}>: package(containers)
<cli/*.ml{,i,y}>: package(containers.data)
<cli/*.ml{,i,y}>: package(extlib)
<cli/*.ml{,i,y}>: package(lwt.ppx)
<cli/*.ml{,i,y}>: package(lwt.unix)
<cli/*.ml{,i,y}>: package(ppx_deriving)
<cli/*.ml{,i,y}>: package(ppx_deriving.show)
<cli/*.ml{,i,y}>: package(ppx_deriving_yojson)
<cli/*.ml{,i,y}>: use_gdb
<cli/*.ml{,i,y}>: use_rmp_lib
# Executable run_integration_test
<test/run_integration_test.{native,byte}>: package(containers)
<test/run_integration_test.{native,byte}>: package(containers.data)
<test/run_integration_test.{native,byte}>: package(extlib)
<test/run_integration_test.{native,byte}>: package(lwt.ppx)
<test/run_integration_test.{native,byte}>: package(lwt.unix)
<test/run_integration_test.{native,byte}>: package(ppx_deriving)
<test/run_integration_test.{native,byte}>: package(ppx_deriving.show)
<test/run_integration_test.{native,byte}>: package(ppx_deriving_yojson)
<test/run_integration_test.{native,byte}>: package(unix)
<test/run_integration_test.{native,byte}>: package(yojson)
<test/run_integration_test.{native,byte}>: use_gdb
<test/run_integration_test.{native,byte}>: use_rmp_lib
<test/*.ml{,i,y}>: package(unix)
<test/*.ml{,i,y}>: package(yojson)
# Executable run_unit_test
<test/run_unit_test.{native,byte}>: package(containers)
<test/run_unit_test.{native,byte}>: package(containers.data)
<test/run_unit_test.{native,byte}>: package(extlib)
<test/run_unit_test.{native,byte}>: package(lwt.ppx)
<test/run_unit_test.{native,byte}>: package(lwt.unix)
<test/run_unit_test.{native,byte}>: package(ppx_deriving)
<test/run_unit_test.{native,byte}>: package(ppx_deriving.show)
<test/run_unit_test.{native,byte}>: package(ppx_deriving_yojson)
<test/run_unit_test.{native,byte}>: use_gdb
<test/run_unit_test.{native,byte}>: use_rmp_lib
<test/*.ml{,i,y}>: package(containers)
<test/*.ml{,i,y}>: package(containers.data)
<test/*.ml{,i,y}>: package(extlib)
<test/*.ml{,i,y}>: package(lwt.ppx)
<test/*.ml{,i,y}>: package(lwt.unix)
<test/*.ml{,i,y}>: package(ppx_deriving)
<test/*.ml{,i,y}>: package(ppx_deriving.show)
<test/*.ml{,i,y}>: package(ppx_deriving_yojson)
<test/*.ml{,i,y}>: use_gdb
<test/*.ml{,i,y}>: use_rmp_lib
# OASIS_STOP
<src/gdbmi_parser.ml>: warn(-45)
<src/gdbmi_types.ml>: pkg_ppx_deriving.std
<src/gdb.ml> or <src/rmp.ml>: pkg_lwt.ppx, warn(-42)
<src/*.mly>: explain
true: use_menhir
true: debug, annot, warn(+a-4-40-42)
